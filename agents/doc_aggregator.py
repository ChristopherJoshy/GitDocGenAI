from typing import List, Dict, Any
from datetime import datetime
import re

class DocAggregator:
    """Compiles individual file documentation into a comprehensive final document"""
    
    def __init__(self):
        self.section_separator = "\n" + "="*80 + "\n"
        self.subsection_separator = "\n" + "-"*60 + "\n"
    
    def compile_documentation(self, repo_url: str, documented_files: List[Dict[str, str]]) -> str:
        """
        Compile all documentation into a single comprehensive document
        
        Args:
            repo_url: GitHub repository URL
            documented_files: List of dictionaries with file_path and documentation
            
        Returns:
            Complete documentation as markdown string
        """
        
        # Sort files by path for organized output
        documented_files = sorted(documented_files, key=lambda x: x['file_path'])
        
        # Extract repository information
        repo_name = self._extract_repo_name(repo_url)
        languages = self._detect_languages(documented_files)
        
        # Build the complete documentation
        documentation_parts = [
            self._generate_header(repo_name, repo_url),
            self._generate_table_of_contents(documented_files),
            self._generate_overview(repo_url, len(documented_files), languages),
            self._generate_file_documentation(documented_files),
            self._generate_footer()
        ]
        
        return "\n".join(documentation_parts)
    
    def _extract_repo_name(self, repo_url: str) -> str:
        """Extract repository name from URL"""
        # Handle various GitHub URL formats
        patterns = [
            r'github\.com/[^/]+/([^/]+?)(?:\.git)?/?$',
            r'github\.com/([^/]+/[^/]+?)(?:\.git)?/?$'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, repo_url)
            if match:
                repo_path = match.group(1)
                if '/' in repo_path:
                    return repo_path.split('/')[-1]
                return repo_path
        
        # Fallback: use last part of URL
        return repo_url.rstrip('/').split('/')[-1].replace('.git', '')
    
    def _detect_languages(self, documented_files: List[Dict[str, str]]) -> List[str]:
        """Detect programming languages from file paths"""
        extensions = set()
        
        for file_info in documented_files:
            file_path = file_info['file_path']
            if '.' in file_path:
                ext = file_path.split('.')[-1].lower()
                extensions.add(ext)
        
        # Map extensions to language names
        language_map = {
            'py': 'Python',
            'js': 'JavaScript', 
            'jsx': 'JavaScript/React',
            'ts': 'TypeScript',
            'tsx': 'TypeScript/React',
            'html': 'HTML',
            'css': 'CSS',
            'scss': 'SCSS',
            'sass': 'Sass',
            'java': 'Java',
            'cpp': 'C++',
            'c': 'C',
            'cs': 'C#',
            'php': 'PHP',
            'rb': 'Ruby',
            'go': 'Go',
            'rs': 'Rust',
            'swift': 'Swift',
            'kt': 'Kotlin',
            'scala': 'Scala',
            'sh': 'Shell',
            'bash': 'Bash',
            'sql': 'SQL',
            'json': 'JSON',
            'xml': 'XML',
            'yaml': 'YAML',
            'yml': 'YAML',
            'md': 'Markdown'
        }
        
        languages = []
        for ext in sorted(extensions):
            if ext in language_map:
                languages.append(language_map[ext])
            else:
                languages.append(ext.upper())
        
        return languages
    
    def _generate_header(self, repo_name: str, repo_url: str) -> str:
        """Generate documentation header"""
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
        
        return f"""# 📚 {repo_name} - Complete Documentation

🔗 **Repository:** [{repo_name}]({repo_url})  
📅 **Generated:** {current_time}  
🤖 **Generated by:** GitHub Repository Documentation Generator with Gemini AI  

---

> 🎯 **About This Documentation**  
> This comprehensive documentation was automatically generated by analyzing the entire repository structure and codebase using advanced AI. Each file has been thoroughly examined to provide detailed insights into functionality, architecture, and usage.

"""
    
    def _generate_table_of_contents(self, documented_files: List[Dict[str, str]]) -> str:
        """Generate table of contents"""
        
        toc = """## 📋 Table of Contents

1. [🚀 Repository Overview](#-repository-overview)
2. [📁 File Documentation](#-file-documentation)
"""
        
        # Group files by directory
        file_groups = {}
        for file_info in documented_files:
            file_path = file_info['file_path']
            
            # Extract directory
            if '/' in file_path:
                directory = '/'.join(file_path.split('/')[:-1])
                filename = file_path.split('/')[-1]
            else:
                directory = 'Root'
                filename = file_path
            
            if directory not in file_groups:
                file_groups[directory] = []
            file_groups[directory].append(filename)
        
        # Add grouped files to TOC
        for directory in sorted(file_groups.keys()):
            toc += f"   - [{directory}/](#file-documentation)\n"
            for filename in sorted(file_groups[directory]):
                # Create anchor link
                anchor = filename.lower().replace('.', '').replace(' ', '-').replace('_', '-')
                toc += f"     - [{filename}](#{anchor})\n"
        
        toc += "\n---\n"
        return toc
    
    def _generate_overview(self, repo_url: str, file_count: int, languages: List[str]) -> str:
        """Generate repository overview section"""
        
        overview = f"""## 🚀 Repository Overview

### 📊 Repository Statistics
- **Total Files Analyzed:** {file_count}
- **Programming Languages:** {len(languages)}
- **Repository URL:** {repo_url}

### 💻 Technology Stack
"""
        
        if languages:
            for lang in languages:
                overview += f"- 🔸 **{lang}**\n"
        else:
            overview += "- No specific languages detected\n"
        
        overview += f"""
### 🎯 Documentation Scope
This documentation covers all {file_count} analyzed files in the repository, providing:
- **Detailed file-by-file analysis**
- **Architecture and structure insights**
- **Usage examples and best practices**
- **Dependencies and integration points**
- **Maintenance and development guidance**

---
"""
        
        return overview
    
    def _generate_file_documentation(self, documented_files: List[Dict[str, str]]) -> str:
        """Generate the main file documentation section"""
        
        doc_section = "## 📁 File Documentation\n\n"
        doc_section += "Below is the comprehensive documentation for each file in the repository:\n\n"
        
        for i, file_info in enumerate(documented_files, 1):
            file_path = file_info['file_path']
            documentation = file_info['documentation']
            
            # Add file separator
            doc_section += self.section_separator
            doc_section += f"### 📄 File {i}: {file_path}\n\n"
            doc_section += documentation
            doc_section += "\n\n"
        
        return doc_section
    
    def _generate_footer(self) -> str:
        """Generate documentation footer"""
        
        return f"""
{self.section_separator}

## 🎉 Documentation Complete!

### 📝 **About This Documentation**
This documentation was automatically generated using advanced AI analysis of the repository structure and codebase. Each file has been examined for:

- **Purpose and functionality**
- **Architecture and design patterns**
- **Dependencies and integrations**  
- **Usage examples and best practices**
- **Maintenance considerations**

### 🤖 **AI-Powered Analysis**
Generated by GitHub Repository Documentation Generator using Gemini AI for comprehensive code analysis and documentation generation.

### 📚 **How to Use This Documentation**
1. **Browse by file** - Use the table of contents to navigate to specific files
2. **Search for keywords** - Use Ctrl+F to find specific functions, classes, or concepts
3. **Understand architecture** - Review the overview and individual file purposes
4. **Follow best practices** - Pay attention to usage examples and recommendations

---

*🌟 Happy coding and may this documentation serve your development journey well! 🚀*

**Generated on:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")}
"""
